#include "common.fxh"

void main_fp (
    in float2 screenTC : TEXCOORD0,
    out float2 oColor : COLOR0
)
{
	oColor = screenTC;
}

// SAirScatteringAttribs g_MediaParams
uniform float  _fEarthRadius;
uniform float  _fAtmTopRadius;
uniform float  _fAtmTopHeight;
uniform float2 _f2ParticleScaleHeight;

float2 IntegrateParticleDensity(in float3 f3Start, 
                                in float3 f3End,
                                in float3 f3EarthCentre,
                                float fNumSteps )
{
    float3 f3Step = (f3End - f3Start) / fNumSteps;
    float fStepLen = length(f3Step);
        
    float fStartHeightAboveSurface = abs( length(f3Start - f3EarthCentre) - _fEarthRadius );
    float2 f2PrevParticleDensity = exp( -fStartHeightAboveSurface / _f2ParticleScaleHeight );

    float2 f2ParticleNetDensity = 0;
    for(float fStepNum = 1; fStepNum <= fNumSteps; fStepNum += 1.f)
    {
        float3 f3CurrPos = f3Start + f3Step * fStepNum;
        float fHeightAboveSurface = abs( length(f3CurrPos - f3EarthCentre) - _fEarthRadius );
        float2 f2ParticleDensity = exp( -fHeightAboveSurface / _f2ParticleScaleHeight );
        f2ParticleNetDensity += (f2ParticleDensity + f2PrevParticleDensity) * fStepLen / 2.f;
        f2PrevParticleDensity = f2ParticleDensity;
    }
    return f2ParticleNetDensity;
}


float2 IntegrateParticleDensityAlongRay(in float3 f3Pos, 
                                        in float3 f3RayDir,
                                        float3 f3EarthCentre, 
                                        uniform const float fNumSteps,
                                        uniform const bool bOccludeByEarth)
{
    if( bOccludeByEarth )
    {
        // If the ray intersects the Earth, return huge optical depth
        float2 f2RayEarthIsecs; 
        GetRaySphereIntersection(f3Pos, f3RayDir, f3EarthCentre, _fEarthRadius, f2RayEarthIsecs);
        if( f2RayEarthIsecs.x > 0 )
            return 1e+20;
    }

    // Get intersection with the top of the atmosphere (the start point must always be under the top of it)
    //      
    //                     /
    //                .   /  . 
    //      .  '         /\         '  .
    //                  /  f2RayAtmTopIsecs.y > 0
    //                 *
    //                   f2RayAtmTopIsecs.x < 0
    //                  /
    //      
    float2 f2RayAtmTopIsecs;
    GetRaySphereIntersection(f3Pos, f3RayDir, f3EarthCentre, _fAtmTopRadius, f2RayAtmTopIsecs);
    float fIntegrationDist = f2RayAtmTopIsecs.y;

    float3 f3RayEnd = f3Pos + f3RayDir * fIntegrationDist;

    return IntegrateParticleDensity(f3Pos, f3RayEnd, f3EarthCentre, fNumSteps);
}

struct OUTPUT
{
	float2 color;
};

// f2UV [0 .. 1], x:height y:zenith cos
OUTPUT PrecomputeNetDensityToAtmTopPS( float2 f2UV )
{
    //float2 f2UV = ProjToUV(In.m_f2PosPS);
    // Do not allow start point be at the Earth surface and on the top of the atmosphere
    float fStartHeight = clamp( lerp(0, _fAtmTopHeight, f2UV.x), 10, _fAtmTopHeight-10 );

    float fCosTheta = f2UV.y * 2 - 1;
    float fSinTheta = sqrt( saturate(1 - fCosTheta*fCosTheta) );
    float3 f3RayStart = float3(0, 0, fStartHeight);
    float3 f3RayDir = float3(fSinTheta, 0, fCosTheta);
    
    float3 f3EarthCentre = float3(0,0,-_fEarthRadius);

    const float fNumSteps = 200;
    OUTPUT f2col;
    f2col.color = IntegrateParticleDensityAlongRay(f3RayStart, f3RayDir, f3EarthCentre, fNumSteps, true);
    return f2col;
}